generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Chapter {
  id         String       @id @unique
  title      String
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  moduleId   String       @map("module_id")
  modules    Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  docChapter DocChapter[]

  @@map("chapters")
}

model Document {
  id         String       @id @unique
  title      String
  content    String?
  category   String?
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  published  Boolean      @default(true)
  authorId   String?      @map("author_id")
  author     User?        @relation(fields: [authorId], references: [id])
  docChapter DocChapter[]

  @@map("documents")
}

model DocChapter {
  docId     String   @map("doc_id")
  chapterId String   @map("chapter_id")
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  document  Document @relation(fields: [docId], references: [id], onDelete: Cascade)

  @@id([docId, chapterId])
  @@map("doc_chapter")
}

model Module {
  id        String    @id @unique
  title     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  chapters  Chapter[]

  @@map("modules")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @updatedAt @map(name: "updated_at")
  role          String?    @default("USER")
  accounts      Account[]
  pages         Document[]
  sessions      Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
